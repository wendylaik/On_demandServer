
package Interfaz;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import server.Flujocliente;

/**
 *
 * @author Jordy vindas
 */
public class Register extends javax.swing.JPanel {

    public static Socket sharedSocket;
    public static boolean sharedAuth;
    private static final String SERVER_ADDRESS = "192.168.100.4"; // Cambia esto con la dirección IP de tu servidor
    private static final int SERVER_PORT = 8080;

    
    public Register() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Username = new javax.swing.JTextField();
        Password = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();

        Username.setText("jTextField1");

        Password.setText("jPasswordField1");

        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(Username, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(35, 35, 35))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String username = Username.getText(); // Obtiene el nombre de usuario del campo de texto    
        char[] passChars = Password.getPassword();
        String password = new String(passChars);
       
        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un nombre de usuario y una contraseña");
        } else {
            Socket socket = null;
            Flujocliente clientCommunication = null;
            try {
                socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                // Crear instancia de ClientCommunication para manejar la comunicación con el servidor
                clientCommunication = new Flujocliente(socket, in, out);

                // Envía el nombre de usuario, la contraseña y el indicador de autenticación compartida al servidor
                clientCommunication.sendMessage("1," + username + "," + password + "-" + Logiin.sharedAuth);

                // Recibir respuesta del servidor
                String response = clientCommunication.receiveMessage();

                // Si la autenticación fue exitosa, procede a abrir la ventana del cliente
                if (response.startsWith("auth exitoso")) {
                    boolean isAuthenticated = Boolean.parseBoolean(response.substring(13));
                    if (isAuthenticated) {
                        // Establecer la autenticación compartida a verdadera
                        Logiin.sharedSocket = socket;
                        Logiin.sharedAuth = true;
                        // Crear la instancia de la ventana del cliente
                        
                        Client client = new Client(username, clientCommunication);
                        client.setVisible(true);
 
                        JFrame frame = new JFrame("Registar");
                        Register registerPanel = new Register();
                        frame.add(registerPanel);
                        frame.pack();
                        frame.setVisible(false);
    
                      
                        
                    }
                }
            } catch (IOException e) {
                System.err.println("Error al conectar con el servidor: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error al conectar con el servidor");
                // Cerrar el socket y la comunicación del cliente si ocurrió algún error
                try {
                    if (clientCommunication != null) {
                        clientCommunication.close();
                    }
                    if (socket != null) {
                        socket.close();
                    }
                } catch (IOException ex) {
                    System.err.println("Error al cerrar el socket: " + ex.getMessage());
                }
            } finally {
                // Limpiar los campos de texto después del registro
                Username.setText("");
                Password.setText("");
            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed
 

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField Password;
    private javax.swing.JTextField Username;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

      
    }

